-
  name: CC0 Compiler Enhancements
  tech: C, SML
  img: cc0.png
  desc: >
    Over the past two semesters I have made several enhancements
    to the C0 compiler CC0. Some of the notable changes are:
      - Implementing backtraces in the C0 runtime
      - Implementing bytecode generation for generic (`void*`) pointers
        and function pointers 
      - Implementing compiler warnings for common mistakes (unused variable,
        dead code, statements with no effect etc.)
      - Implemented `printf` and `format` (i.e. `asprintf`) into the language with full consideration for 
        bytecode generation, type safety, etc.

    Hopefully this will be released soon

-
  name: F0 Language Compiler 
  tech: Haskell
  img: f0.png
  desc: >
    This compiles a subset of ML (including sum/product types, 
    polymorphism, first-class functions, closures, etc.) into C1.

    Source on [GitHub](https://github.com/ishantheperson/F0).
    It is also accessible on Andrew via `~ibhargav/public/f0`
    
- 
  name: C0 IDE Integration
  tech: TypeScript
  img: c0-vscode.png
  desc: >
    This implements Microsoft's Language Server Protocol
    for the programming language C0, which is used as part
    of the introductory CS course at CMU. It has many of the features
    you would expect such as semantic code completion, error squiggles,
    go-to-definition, etc. 

    Download/get more information on the [VSCode Marketplace](https://marketplace.visualstudio.com/items?itemName=15122staff.c0-lsp)

-
  name: Model Checking
  tech: Haskell
  img: model-checking.png
  desc: >
    This program is able to decide the validity (truth value)
    of first-order logic statements over a synchronous model. 
    It can also provide examples which satisfy a given statement.

    It was developed as part of the final project for 15-354
    Computational Discrete Math at CMU and was an exercise for
    using some higher-level constructs of Haskell's type systems
    to implement dependant typing. 

    Source code on [GitHub](https://github.com/ishantheperson/ModelChecking)

-
  name: Spectral Clustering
  tech: Python, C
  img: spectral-cluster.png
  desc: >
    Calculates appropriate clusters for data points
    of arbitrary dimension using the spectral clustering
    algorithm, and then displays the results
    graphically, along with a visual representation
    of the constructed similarity graph.


    The Spectral Clustering algorithm makes use of 
    the k-means algorithm, which is implemented in C
    for speed. The Spectral Clustering component is 
    written in Python because it uses `numpy` to 
    find eigenvalues.


    I've written about `matplotlib` integration as well
    as C extensions on this site. 

-
  name: Pixel Game
  tech: TypeScript
  img: pixel-game.png
  desc: >
    This is a particle physics simulator. There are several
    different pixel types, each with different properties. 


    The game world features forces, explosions, gravity, as well
    as mechanisms to override these for each individual particle type.


    The source is available on [GitHub](https://github.com/ishantheperson/pixel-game)
    and a live demo is available [here](http://www.andrew.cmu.edu/user/ibhargav/pixel-game/)

-
  name: Carnegie Cupid
  tech: Node.js, JavaScript
  img: carnegie-cupid.png
  desc: >
    1st place - GSK @ HackCMU 2018

    
    Modern SPA which used a real-time video feed of the user
    in conjunction with Microsoft Azure machine learning 
    services to identify facial expressions as part of 
    calculating "interest".


    More details available on [DevPost](https://devpost.com/software/carnegie-cupid).


    Source available on [GitHub](https://github.com/lydiaxing/date-app)

-
  name: Cellular Automata
  tech: TypeScript
  img: cellular.png
  desc: >
    Configurable cellular automata simulator.


    Source available on [GitHub](https://github.com/ishantheperson/CellularAutomata)
    and live demo available [here](http://www.andrew.cmu.edu/user/ibhargav/cellular/)